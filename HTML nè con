
   <!doctype html>
<html lang="vi">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Marine - Ocean of Vocabulary</title>
  <style>
    /* === Theme variables === */
    :root {
      --ocean-1: #7bdff6;
      --ocean-2: #4ab6e6;
      --accent: #ffd166;
      --card-bg: rgba(255,255,255,0.95);
      --glass: rgba(255,255,255,0.06);
      --shadow: 0 8px 30px rgba(10,30,60,0.12);
      --nav-height: 70px;
      --radius: 16px;
      --text: #03364a;
      --muted: #2b6a7e;
      --note-bg: #fff9e6;
      --success: #06d6a0;
      --warning: #ffd166;
      --danger: #ef476f;
    }
    * {box-sizing: border-box; margin: 0; padding: 0; font-family: Inter, "Segoe UI", Roboto, Arial; scroll-behavior: smooth;}
    body {
      min-height: 100vh;
      background: radial-gradient(1400px 700px at 5% 8%, rgba(255,255,255,0.04), transparent 6%),
                  linear-gradient(180deg, var(--ocean-1) 0%, var(--ocean-2) 56%, #08354a 100%);
      color: var(--text);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      padding-bottom: 110px;
      position: relative;
      overflow-x: hidden;
    }
    a {color: inherit; text-decoration: none;}
    button {cursor: pointer; font-family: inherit;}
    input, textarea {font-family: inherit;}
    ::-webkit-scrollbar {width: 8px;}
    ::-webkit-scrollbar-track {background: rgba(255,255,255,0.1); border-radius: 4px;}
    ::-webkit-scrollbar-thumb {background: rgba(255,255,255,0.3); border-radius: 4px;}
    ::-webkit-scrollbar-thumb:hover {background: rgba(255,255,255,0.5);}

    /* Ocean Background with Sea Creatures, Seaweed, and Coral */
    .ocean-bg {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      opacity: 0.2;
      z-index: 0;
      overflow: hidden;
    }
    .sea-creature, .coral, .seaweed {
      position: absolute;
    }
    .sea-creature.fish1 {width: 40px; height: 20px; bottom: 20%; left: -50px; animation: swimFish 20s linear infinite;}
    .sea-creature.fish2 {width: 30px; height: 15px; top: 30%; left: -50px; animation: swimFish 25s linear infinite; animation-delay: 5s;}
    .sea-creature.turtle {width: 50px; height: 30px; bottom: 40%; left: -60px; animation: swimTurtle 30s linear infinite; animation-delay: 10s;}
    .coral.c1 {width: 60px; height: 80px; bottom: 0; left: 10%; background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%23a0e9ff"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/></svg>') no-repeat; background-size: contain;}
    .coral.c2 {width: 80px; height: 100px; bottom: 0; right: 15%; background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%236cc8ff"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/></svg>') no-repeat; background-size: contain;}
    .seaweed.s1 {width: 30px; height: 100px; bottom: 0; left: 25%; background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2306d6a0"><path d="M12 2c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/></svg>') no-repeat; background-size: contain; animation: sway 6s ease-in-out infinite;}
    .seaweed.s2 {width: 40px; height: 120px; bottom: 0; right: 30%; background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="%2306d6a0"><path d="M12 2c-5.52 0-10 4.48-10 10s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/></svg>') no-repeat; background-size: contain; animation: sway 8s ease-in-out infinite; animation-delay: 2s;}
    @keyframes swimFish {0% {transform: translateX(-50px) translateY(0) rotate(0deg);} 25% {transform: translateX(25vw) translateY(-20px) rotate(5deg);} 50% {transform: translateX(50vw) translateY(20px) rotate(-5deg);} 75% {transform: translateX(75vw) translateY(-10px) rotate(3deg);} 100% {transform: translateX(100vw) translateY(0) rotate(0deg);}}
    @keyframes swimTurtle {0% {transform: translateX(-60px) translateY(0);} 50% {transform: translateX(50vw) translateY(10px);} 100% {transform: translateX(100vw) translateY(0);}}
    @keyframes sway {0%, 100% {transform: rotate(0deg);} 50% {transform: rotate(10deg);}}

    /* Bubble Animation */
    .bubbles {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      overflow: hidden;
      z-index: -1;
    }
    .bubble {
      position: absolute;
      bottom: -100px;
      background: rgba(255,255,255,0.7);
      border-radius: 50%;
      animation: rise 10s infinite ease-in;
    }
    @keyframes rise {
      0% { transform: translateY(0) scale(0.5); opacity: 0.7;}
      100% { transform: translateY(-120vh) scale(1); opacity: 0;}
    }

    /* Chatbot */
    .chatbot {position: fixed; right: 20px; bottom: 20px; z-index: 80; display: flex; flex-direction: column; align-items: flex-end; gap: 10px;}
    .chat-avatar {
      width: 70px; height: 70px; border-radius: 40px; background: linear-gradient(100deg, #BBDCE5, #5682B1) opacity : 0.1;
      display: flex; align-items: center; justify-content: center; font-size: 34px; color: white;
      box-shadow: var(--shadow); cursor: pointer; transition: transform 140ms ease, box-shadow 140ms ease;
      animation: float 4s ease-in-out infinite;
    }
    .chat-avatar:active {transform: scale(0.97);}
    .chat-avatar:hover {box-shadow: 0 12px 30px rgba(43, 179, 255, 0.4);}
    @keyframes float {0%, 100% {transform: translateY(0);} 50% {transform: translateY(-10px);}}
    .chatbox {
      width: 360px; max-width: 94vw; background: var(--card-bg); border-radius: 14px; padding: 12px;
      box-shadow: var(--shadow); display: none; flex-direction: column; gap: 10px; backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }
    .chatbox.active {display: flex;}
    .chatbox .head {display: flex; align-items: center; gap: 10px; padding: 8px; border-bottom: 1px solid rgba(5,60,80,0.08);}
    .chatbox .messages {height: 260px; overflow: auto; padding: 10px; display: flex; flex-direction: column; gap: 10px;}
    .msg {max-width: 78%; padding: 10px 14px; border-radius: 12px; font-size: 14px; line-height: 1.4;}
    .msg.bot {background: linear-gradient(90deg, #f0f9ff, #dff6ff); align-self: flex-start;}
    .msg.user {background: linear-gradient(90deg, #ffdede, #ffe7d9); align-self: flex-end;}
    .chat-input {display: flex; gap: 8px; padding-top: 8px;}
    .chat-input input {flex: 1; padding: 10px 14px; border-radius: 999px; border: 1px solid rgba(10,30,60,0.1); background: rgba(255, 255, 255, 0.8);}
    .chat-input button {padding: 10px 16px; border-radius: 999px; border: none; background: linear-gradient(90deg, #2bb3ff, #2fa0d9); color: white; font-weight: 700; transition: all 0.3s ease;}
    .chat-input button:hover {transform: translateY(-2px); box-shadow: 0 4px 10px rgba(43, 179, 255, 0.3);}
    .chat-popup {
      position: absolute;
      bottom: 90px;
      right: 20px;
      background: linear-gradient(90deg, #f0f9ff, #dff6ff);
      padding: 10px 14px;
      border-radius: 12px;
      font-size: 14px;
      color: var(--text);
      box-shadow: var(--shadow);
      display: none;
      max-width: 200px;
      z-index: 85;
    }
    .chat-popup.active {display: block;}
    /* NAV */
    .nav {height: var(--nav-height); display: flex; align-items: center; justify-content: space-between; padding: 10px 24px; position: sticky; top: 0; z-index: 60; backdrop-filter: blur(6px); background: linear-gradient(180deg, rgba(255,255,255,0.06), rgba(255,255,255,0.02)); box-shadow: 0 1px 0 rgba(255,255,255,0.04);}
    .brand {display: flex; gap: 12px; align-items: center;}
    .logo {width: 48px; height: 48px; border-radius: 12px; background: linear-gradient(135deg, #58c5ff, #2fa0d9); display: flex; align-items: center; justify-content: center; color: white; font-weight: 800; font-size: 18px; box-shadow: var(--shadow);}
    .brand .title {font-weight: 800; font-size: 18px;}
    .menu {display: flex; gap: 12px; align-items: center;}
    .menu a {padding: 8px 12px; border-radius: 12px; font-weight: 700; opacity: 0.96;}
    .menu a:hover {background: rgba(255,255,255,0.04);}
    .cta {background: linear-gradient(90deg, #ffd166, #ff8a65); color: #092a2b; padding: 10px 16px; border-radius: 12px; font-weight: 800; box-shadow: 0 10px 26px rgba(255,138,101,0.16);}
    .shells {display: flex; align-items: center; gap: 6px; background: rgba(255,255,255,0.1); padding: 6px 12px; border-radius: 12px; color: white; font-weight: 700;}
    /* container */
    .container {max-width: 1150px; margin: 22px auto; padding: 0 20px;}
    /* Page sections */
    .page {display: none;}
    .page.active {display: block;}
    /* HERO */
    .hero {display: grid; grid-template-columns: 1fr 420px; gap: 22px; align-items: center; margin-top: 6px;}
    .hero-card {background: linear-gradient(180deg, rgba(255,255,255,0.96), rgba(255,255,255,0.92)); border-radius: 18px; padding: 24px; box-shadow: var(--shadow); position: relative; overflow: hidden;}
    .hero h1 {font-size: 34px; color: var(--text); margin-bottom: 8px;}
    .hero p {color: var(--muted); margin-bottom: 14px;}
    .buttons {display: flex; gap: 12px;}
    .btn {padding: 12px 14px; border-radius: 12px; font-weight: 800; display: inline-flex; align-items: center; gap: 10px; border: none;}
    .btn-primary {background: linear-gradient(90deg, #2bb3ff, #2fa0d9); color: white;}
    .btn-primary:before {content: 'üê†';}
    .btn-outline {background: transparent; border: 2px solid rgba(5,60,80,0.06); color: var(--text);}
    .btn-outline:before {content: 'ü™∏';}
    .btn-success {background: var(--success); color: white;}
    .btn-success:before {content: 'üêö';}
    .btn-warning {background: var(--warning); color: var(--text);}
    .btn-warning:before {content: 'üåä';}
    .btn-danger {background: var(--danger); color: white;}
    .btn-danger:before {content: 'ü¶ë';}
    /* ocean panel */
    .ocean-panel {position: relative; border-radius: 18px; overflow: hidden; padding: 18px; background: linear-gradient(180deg, #2fb0e6, #0d6e93); color: white; box-shadow: var(--shadow); min-height: 320px;}
    .ocean-actions {display: flex; gap: 8px; margin-top: 12px; flex-wrap: wrap;}
    .ocean-actions .btn {background: rgba(255,255,255,0.12); color: white; padding: 10px 12px; border-radius: 10px; font-weight: 700;}
    .ocean-actions .btn:before {content: 'üê¨'; margin-right: 4px;}
    /* skill tree/cards (duolingo-like) */
    .skills {margin-top: 20px; display: flex; gap: 18px; flex-wrap: wrap; align-items: center;}
    .skill {width: 96px; height: 96px; border-radius: 50%; background: linear-gradient(180deg, #ffefc4, #ffd166); display: flex; align-items: center; justify-content: center; flex-direction: column; gap: 6px; box-shadow: 0 10px 20px rgba(0,0,0,0.12); cursor: pointer; transition: transform 180ms; position: relative;}
    .skill:hover {transform: translateY(-6px);}
    .skill .label {font-size: 12px; font-weight: 800; color: #073544;}
    .skill .label:before {content: 'üêü'; margin-right: 4px;}
    .skill .sub {font-size: 11px; color: #073544; opacity: 0.8;}
    .skill.locked {filter: grayscale(0.08) contrast(0.9); opacity: 0.95;}
    /* grid quick cards */
    .grid {display: grid; grid-template-columns: repeat(3, 1fr); gap: 16px; margin-top: 20px;}
    .card {background: var(--card-bg); padding: 16px; border-radius: 14px; box-shadow: var(--shadow); display: flex; gap: 12px; align-items: center; position: relative;}
    .icon-circle {width: 62px; height: 62px; border-radius: 12px; background: linear-gradient(135deg, #a0e9ff, #6cc8ff); display: flex; align-items: center; justify-content: center; font-size: 28px; color: white;}
    .card h3 {font-size: 16px; margin-bottom: 6px;}
    .card p {font-size: 13px; color: #1d687f;}
    /* note badge */
    .note-badge {position: absolute; right: 10px; top: 10px; background: var(--note-bg); padding: 6px 8px; border-radius: 999px; font-weight: 700; font-size: 13px; color: #8a5a00; box-shadow: 0 6px 18px rgba(0,0,0,0.06);}
    .note-badge:before {content: 'üìù'; margin-right: 4px;}
    /* progress */
    .progress {margin-top: 14px; background: linear-gradient(180deg, rgba(255,255,255,0.04), rgba(255,255,255,0.02)); padding: 12px; border-radius: 12px; display: flex; flex-direction: column; gap: 8px;}
    .progress .bar {height: 12px; background: rgba(255,255,255,0.12); border-radius: 12px; overflow: hidden;}
    .progress .bar > i {display: block; height: 100%; background: linear-gradient(90deg, #ffd166, #ff8a65); width: 0%; border-radius: 12px; transition: width 700ms ease;}
    /* Vocabulary Page */
    .vocab-header {display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;}
    .vocab-list {margin-top: 20px; display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 14px; max-height: 400px; overflow-y: auto; padding-right: 8px;}
    .vocab-item {background: var(--card-bg); padding: 16px; border-radius: 14px; box-shadow: var(--shadow); display: flex; justify-content: space-between; align-items: center;}
    .vocab-info {flex: 1;}
    .vocab-word {font-weight: 800; font-size: 18px;}
    .vocab-word:before {content: 'üêö'; margin-right: 4px;}
    .vocab-meaning {color: var(--muted); margin-top: 4px;}
    .vocab-actions {display: flex; gap: 8px;}
    .vocab-note-btn {background: var(--note-bg); color: #8a5a00; border: none; padding: 6px 10px; border-radius: 8px; font-weight: 700; font-size: 13px;}
    .vocab-note-btn:before {content: 'üìù'; margin-right: 4px;}
    /* Grammar Page */
    .grammar-header {display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;}
    .grammar-list {margin-top: 20px; display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 14px; max-height: 400px; overflow-y: auto; padding-right: 8px;}
    .grammar-item {background: var(--card-bg); padding: 16px; border-radius: 14px; box-shadow: var(--shadow); display: flex; justify-content: space-between; align-items: center;}
    .grammar-info {flex: 1;}
    .grammar-title {font-weight: 800; font-size: 18px;}
    .grammar-title:before {content: 'üå¥'; margin-right: 4px;}
    .grammar-explanation {color: var(--muted); margin-top: 4px;}
    .grammar-actions {display: flex; gap: 8px;}
    .grammar-note-btn {background: var(--note-bg); color: #8a5a00; border: none; padding: 6px 10px; border-radius: 8px; font-weight: 700; font-size: 13px;}
    .grammar-note-btn:before {content: 'üìù'; margin-right: 4px;}
    /* Notes Section */
    .notes-section {margin-top: 30px;}
    .notes-section h3 {font-size: 20px; font-weight: 800; margin-bottom: 12px;}
    .notes-section h3:before {content: 'üåä'; margin-right: 4px;}
    .notes-list {display: flex; flex-direction: column; gap: 8px;}
    .note-item {padding: 10px; border-radius: 10px; background: var(--note-bg); cursor: pointer; display: flex; flex-direction: column; gap: 6px;}
    .note-item .meta {font-size: 12px; color: #7a5b00; display: flex; justify-content: space-between;}
    /* Flashcard Practice */
    .flashcard-container {max-width: 600px; margin: 0 auto; perspective: 1000px;}
    .flashcard {width: 100%; height: 320px; position: relative; transform-style: preserve-3d; transition: transform 0.6s;}
    .flashcard.flipped {transform: rotateY(180deg);}
    .flashcard-front, .flashcard-back {position: absolute; width: 100%; height: 100%; backface-visibility: hidden; border-radius: 18px; padding: 24px; display: flex; flex-direction: column; justify-content: center; align-items: center; box-shadow: var(--shadow);}
    .flashcard-front {background: linear-gradient(135deg, #a0e9ff, #6cc8ff); color: white;}
    .flashcard-back {background: linear-gradient(135deg, #ffefc4, #ffd166); color: var(--text); transform: rotateY(180deg);}
    .flashcard-word {font-size: 32px; font-weight: 800; margin-bottom: 10px;}
    .flashcard-meaning {font-size: 20px; text-align: center;}
    .flashcard-example {margin-top: 16px; font-style: italic; text-align: center;}
    .flashcard-controls {margin-top: 20px; display: flex; justify-content: center; gap: 12px;}
    .difficulty-btn {width: 50px; height: 50px; border-radius: 50%; border: none; font-size: 20px; display: flex; align-items: center; justify-content: center; transition: transform 0.2s;}
    .difficulty-btn:hover {transform: scale(1.1);}
    .difficulty-btn.btn-primary {background: linear-gradient(90deg, #2bb3ff, #2fa0d9); color: white;}
    .difficulty-btn.btn-success {background: var(--success); color: white;}
    /* Shop */
    .shop-grid {display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 16px; margin-top: 20px;}
    .shop-item {background: var(--card-bg); padding: 16px; border-radius: 14px; box-shadow: var(--shadow); text-align: center;}
    .shop-item-img {width: 100%; height: 120px; border-radius: 10px; background: linear-gradient(135deg, #a0e9ff, #6cc8ff); margin-bottom: 10px; display: flex; align-items: center; justify-content: center; font-size: 48px;}
    .shop-item-price {display: flex; align-items: center; justify-content: center; gap: 6px; margin-top: 8px;}
    /* Progress Page */
    .progress-cards {display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px; margin-top: 20px;}
    .progress-card {background: var(--card-bg); padding: 16px; border-radius: 14px; box-shadow: var(--shadow);}
    .progress-card h3 {font-size: 16px; margin-bottom: 10px; color: var(--muted);}
    .progress-card h3:before {content: 'üèÜ'; margin-right: 4px;}
    .progress-card .number {font-size: 28px; font-weight: 800; color: var(--text);}
    /* Modal styles */
    .modal-backdrop {position: fixed; inset: 0; background: rgba(2,20,30,0.35); display: none; align-items: center; justify-content: center; z-index: 90;}
    .modal {max-width: 500px; max-height: 90vh; overflow: auto; background: white; border-radius: 14px; padding: 14px; box-shadow: var(--shadow); display: flex; gap: 12px;}
    .note-editor {flex: 1; display: flex; flex-direction: column; gap: 8px;}
    .note-editor input, .note-editor textarea {width: 100%; padding: 10px; border-radius: 10px; border: 1px solid rgba(10,30,60,0.06); font-size: 14px;}
    .note-editor .actions {display: flex; gap: 8px; justify-content: flex-end;}
    /* Add word/grammar modal */
    .add-form {display: flex; flex-direction: column; gap: 12px;}
    .form-group {display: flex; flex-direction: column; gap: 6px;}
    .form-group label {font-weight: 700; font-size: 14px;}
    .form-group label:before {content: 'üå¥'; margin-right: 4px;}
    .form-group input, .form-group textarea {width: 100%; padding: 10px; border-radius: 10px; border: 1px solid rgba(10,30,60,0.06); font-size: 14px;}
    /* Toast notifications */
    .toast {position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); background: var(--success); color: white; padding: 12px 20px; border-radius: 12px; box-shadow: var(--shadow); z-index: 100; display: none; align-items: center; gap: 10px;}
    .toast:before {content: 'üê¨';}
    /* small screens */
    @media (max-width: 980px) {
      .hero {grid-template-columns: 1fr;}
      .grid {grid-template-columns: repeat(2, 1fr);}
    }
    @media (max-width: 640px) {
      .grid {grid-template-columns: 1fr;}
      .skills {justify-content: flex-start; overflow: auto; padding-bottom: 8px;}
      .vocab-header, .grammar-header {flex-direction: column; align-items: flex-start; gap: 12px;}
      .vocab-list, .grammar-list {grid-template-columns: 1fr;}
      .chatbox {width: 90vw;}
    }
  </style>
</head>
<body>
  <!-- Ocean Background -->
  <div class="ocean-bg">
    <div class="sea-creature fish1">üê†</div>
    <div class="sea-creature fish2">üêü</div>
    <div class="sea-creature turtle">üê¢</div>
    <div class="sea-creature turtle">üêô</div>

    <div class="coral c1"></div>
    <div class="coral c2"></div>
    <div class="seaweed s1"></div>
    <div class="seaweed s2"></div>
  </div>
  <!-- Bubbles -->
  <div class="bubbles"></div>
  <!-- Chatbot -->
  <div class="chatbot" aria-live="polite">
    <div class="chatbox" id="chatbox" role="dialog" aria-label="Assistant chat">
      <div class="head">
        <div style="width:46px;height:46px;border-radius:12px;background:linear-gradient(135deg,#2bb3ff,#2fa0d9);display:flex;align-items:center;justify-content:center;color:#fff;font-weight:800">MO</div>
        <div>
          <div style="font-weight:800">Kh√¥ M·ª±c ‚Äî Tr·ª£ l√Ω bi·ªÉn</div>
          <div style="font-size:12px;color:var(--muted)">Gi·ª°n th√¥i m√°, nh∆∞ng t·ªõ c≈©ng bi·∫øt gi·∫£ng üòÑ</div>
        </div>
      </div>
      <div class="messages" id="messages" aria-live="polite">
        <div class="msg bot">Hey! M√∫n √¥n t·ª´ n√†o v·ªÅ h·∫£i s·∫£n h√¥ng? üê†</div>
      </div>
      <div class="chat-input">
        <input id="chatInput" type="text" placeholder="G√µ: 'meaning of tide' ho·∫∑c 's·ª≠a: I goed'..." />
        <button id="sendBtn">G·ª≠i</button>
      </div>
    </div>
    <div class="chat-popup" id="chatPopup"></div>
    <div class="chat-avatar" id="avatar" title="M·ªü tr·ª£ l√Ω">üêô</div>
  </div>
  <!-- NAV -->
  <div class="nav">
    <div class="brand">
      <div class="logo">üêô</div>
      <div>
        <div class="title">Marine</div>
        <div style="font-size:12px;color:var(--muted)"> Ocean of Vocabulary üêü</div>
      </div>
    </div>
    <div class="menu" aria-label="main navigation">
      <a href="#" onclick="goTo('home')">Home</a>
      <a href="#" onclick="goTo('vocab')">Vocabulary</a>
      <a href="#" onclick="goTo('grammar')">Grammar</a>
      <a href="#" onclick="goTo('practice')">Practice</a>
      <a href="#" onclick="goTo('progress')">Progress</a>
      <a href="#" onclick="goTo('shop')">Shop</a>
    </div>
    <div style="display:flex;align-items:center;gap:12px">
      <div class="shells">
        <span>üêö</span>
        <span id="shells-count">200</span>
      </div>
      <div style="display:flex;gap:8px;align-items:center;color:var(--muted);font-weight:700">
        üî• <span id="streak">4</span> days
      </div>
      <a class="cta" href="#" onclick="goTo('practice')">Sign-In</a>
    </div>
  </div>
  <!-- Toast notification -->
  <div class="toast" id="toast">
    <span id="toast-message"></span>
  </div>
  <!-- HOME PAGE -->
  <div class="container page active" id="home-page">
    <div class="hero">
      <div class="hero-card" role="region" aria-label="Hero">
        <div class="bubbles" aria-hidden="true">
          <div class="bubble b1"></div><div class="bubble b2"></div><div class="bubble b3"></div><div class="bubble b4"></div><div class="bubble b5"></div>
        </div>
        <h1>H·ªçc nh∆∞ ch∆°i ‚Äî theo nh√°nh k·ªπ nƒÉng ƒë·∫°i d∆∞∆°ng üåä</h1>
        <p>Kh√°m ph√° skill bubbles, h·ªçc flashcard, l√†m quiz, v√† ghi ch√∫ trong t·ª´ v·ª±ng ‚Äî l∆∞u tr·ª±c ti·∫øp tr√™n tr√¨nh duy·ªát.</p>
        <div class="buttons">
          <button class="btn btn-primary" onclick="goTo('practice')">√în t·∫≠p ngay</button>
          <button class="btn btn-outline" onclick="goTo('vocab')">Kh√°m ph√° t·ª´ v·ª±ng</button>
        </div>
        <div class="progress" style="margin-top:18px;max-width:560px;">
          <div style="display:flex;justify-content:space-between;align-items:center">
            <div style="font-weight:800">Ti·∫øn ƒë·ªô h√¥m nay</div>
            <div style="font-size:13px;color:var(--muted)" id="todayWords">12 / 20 t·ª´</div>
          </div>
          <div class="bar"><i id="barFill" style="width:60%"></i></div>
          <div style="display:flex;gap:12px;font-size:13px;color:var(--muted);margin-top:8px">
            <div>üî• Streak: <strong id="streakTxt">4 ng√†y</strong></div>
            <div>üèÜ Points: <strong id="points">120</strong></div>
          </div>
        </div>
      </div>
      <div class="ocean-panel" aria-hidden="false">
        <div style="display:flex;justify-content:space-between;align-items:center">
          <div>
            <h3 style="margin:0;font-size:20px;font-weight:800">Skill Tree ‚Äî Ch·ªß ƒë·ªÅ bi·ªÉn</h3>
            <div style="opacity:0.95">M·ªü c√°c bubble ƒë·ªÉ luy·ªán t·∫≠p t·ª´ng b·ªô nh·ªè</div>
          </div>
          <div style="text-align:right">
            <div style="font-weight:800;font-size:28px">üåø</div>
          </div>
        </div>
        <div class="skills" id="skills"></div>
        <div style="margin-top:12px">
          <div class="ocean-actions">
            <button class="btn" onclick="shuffleSkills()">T√πy √Ω</button>
            <button class="btn" onclick="startDaily()">B√†i h√†ng ng√†y</button>
          </div>
        </div>
      </div>
    </div>
    <div class="grid" style="margin-top:20px">
      <div class="card" role="button" onclick="goTo('vocab')">
        <div class="icon-circle">üê†</div>
        <div>
          <h3>T·ª´ v·ª±ng ‚Äî Ch·ªß ƒë·ªÅ bi·ªÉn</h3>
          <p>L∆∞u tr·ªØ t·ª´ theo ch·ªß ƒë·ªÅ: fish, coral, tide... C√≥ v√≠ d·ª• & ghi ch√∫.</p>
        </div>
      </div>
      <div class="card" role="button" onclick="goTo('grammar')">
        <div class="icon-circle">ü™∏</div>
        <div>
          <h3>Ng·ªØ ph√°p ‚Äî G·ªçn & d·ªÖ hi·ªÉu</h3>
          <p>Gi·∫£i th√≠ch nhanh + v√≠ d·ª• minh h·ªça, b√†i t·∫≠p ng·∫Øn theo ch·ªß ƒë·ªÅ.</p>
        </div>
        <div class="note-badge" onclick="event.stopPropagation(); addQuickNote('Grammar','Note v·ªÅ ng·ªØ ph√°p...')">Ôºã</div>
      </div>
      <div class="card" role="button" onclick="goTo('practice')">
        <div class="icon-circle">üê¨</div>
        <div>
          <h3>√în t·∫≠p ‚Äî Flashcard & Quiz</h3>
          <p>Flashcard + quiz nhanh. H·ªá th·ªëng g·ª£i √Ω t·ª´ c·∫ßn √¥n l·∫°i.</p>
        </div>
        <div class="note-badge" onclick="event.stopPropagation(); addQuickNote('Practice','Ghi ch√∫ nhanh cho b√†i √¥n')">Ôºã</div>
      </div>
    </div>
  </div>
  <!-- VOCABULARY PAGE -->
  <div class="container page" id="vocab-page">
    <div class="vocab-header">
      <h2>T·ª´ v·ª±ng ch·ªß ƒë·ªÅ bi·ªÉn</h2>
      <div style="display:flex;gap:12px">
        <button class="btn btn-primary" onclick="openAddWordModal()">+ Th√™m t·ª´ m·ªõi</button>
        <button class="btn btn-outline" onclick="openNotes()">Ghi ch√∫</button>
      </div>
    </div>
    <div class="vocab-list" id="vocab-list"></div>
    <div class="notes-section">
      <h3>Ghi ch√∫ t·ª´ v·ª±ng</h3>
      <div class="notes-list" id="notesContainer"></div>
      <div style="margin-top:12px">
        <button class="btn btn-primary" onclick="createNewNote()">+ Th√™m ghi ch√∫</button>
      </div>
    </div>
  </div>
  <!-- GRAMMAR PAGE -->
  <div class="container page" id="grammar-page">
    <div class="grammar-header">
      <h2>Ng·ªØ ph√°p ch·ªß ƒë·ªÅ bi·ªÉn</h2>
      <div style="display:flex;gap:12px">
        <button class="btn btn-primary" onclick="openAddGrammarModal()">+ Th√™m ng·ªØ ph√°p m·ªõi</button>
        <button class="btn btn-outline" onclick="openNotes()">Ghi ch√∫</button>
      </div>
    </div>
    <div class="grammar-list" id="grammar-list"></div>
    <div class="notes-section">
      <h3>Ghi ch√∫ ng·ªØ ph√°p</h3>
      <div class="notes-list" id="notesContainer"></div>
      <div style="margin-top:12px">
        <button class="btn btn-primary" onclick="createNewNote()">+ Th√™m ghi ch√∫</button>
      </div>
    </div>
  </div>
  <!-- PRACTICE/FLASHCARD PAGE -->
  <div class="container page" id="practice-page">
    <h2>√în t·∫≠p v·ªõi Flashcard</h2>
    <p style="color:var(--muted);margin-bottom:20px">H·ªá th·ªëng SRS gi√∫p b·∫°n √¥n t·∫≠p t·ª´ v·ª±ng ƒë√∫ng th·ªùi ƒëi·ªÉm</p>
    <div class="flashcard-container">
      <div class="flashcard" id="flashcard">
        <div class="flashcard-front">
          <div class="flashcard-word" id="flashcard-word">tide</div>
          <p>Nh·∫•n ƒë·ªÉ xem nghƒ©a</p>
        </div>
        <div class="flashcard-back">
          <div class="flashcard-meaning" id="flashcard-meaning">the regular rise and fall of the sea</div>
          <div class="flashcard-example" id="flashcard-example">The tide brings many shells to the shore.</div>
        </div>
      </div>
      <div class="flashcard-controls" id="flashcard-controls">
        <button class="difficulty-btn btn-primary" onclick="prevCard()" title="T·ª´ tr∆∞·ªõc">üëà</button>
        <button class="difficulty-btn btn-success" onclick="markAsLearned()" title="ƒê√°nh d·∫•u ƒë√£ h·ªçc">‚úÖ</button>
        <button class="difficulty-btn btn-primary" onclick="nextCard()" title="T·ª´ ti·∫øp theo">üëâ</button>
      </div>
    </div>
    <div style="text-align:center;margin-top:20px">
      <p id="review-stats">C√≤n <strong>5</strong> t·ª´ c·∫ßn √¥n h√¥m nay</p>
    </div>
  </div>
  <!-- PROGRESS PAGE -->
  <div class="container page" id="progress-page">
    <h2>Ti·∫øn tr√¨nh h·ªçc t·∫≠p</h2>
    <p style="color:var(--muted);margin-bottom:20px">Theo d√µi m·ª•c ti√™u h·ªçc t·∫≠p h√†ng ng√†y c·ªßa b·∫°n</p>
    <div class="progress-cards">
      <div class="progress-card">
        <h3>M·ª•c ti√™u h√¥m nay</h3>
        <div class="number" id="today-goal">12/20 t·ª´</div>
        <div class="progress" style="margin-top:10px">
          <div class="bar"><i style="width:60%"></i></div>
        </div>
      </div>
      <div class="progress-card">
        <h3>S·ªë ng√†y li√™n ti·∫øp</h3>
        <div class="number" id="streak-days">4 ng√†y</div>
      </div>
      <div class="progress-card">
        <h3>T·ªïng s·ªë t·ª´ ƒë√£ h·ªçc</h3>
        <div class="number" id="total-words">42 t·ª´</div>
      </div>
      <div class="progress-card">
        <h3>T·ªïng v·ªè s√≤ ki·∫øm ƒë∆∞·ª£c</h3>
        <div class="number" id="total-shells">120 üêö</div>
      </div>
    </div>
    <div style="margin-top:30px">
      <h3>ƒê·∫∑t m·ª•c ti√™u h√†ng ng√†y</h3>
      <div style="display:flex;gap:12px;align-items:center;margin-top:12px">
        <input type="number" id="daily-goal" value="20" min="5" max="50" style="padding:10px;border-radius:10px;border:1px solid rgba(10,30,60,0.06);width:80px">
        <span>t·ª´ m·ªói ng√†y</span>
        <button class="btn btn-primary" onclick="updateDailyGoal()">C·∫≠p nh·∫≠t</button>
      </div>
    </div>
  </div>
  <!-- SHOP PAGE -->
  <div class="container page" id="shop-page">
    <h2>C·ª≠a h√†ng v·ªè s√≤</h2>
    <p style="color:var(--muted);margin-bottom:20px">D√πng v·ªè s√≤ ƒë·ªÉ mua v·∫≠t ph·∫©m trang tr√≠</p>
    <div class="shop-grid">
      <div class="shop-item">
        <div class="shop-item-img">üåä</div>
        <h3>N·ªÅn bi·ªÉn xanh</h3>
        <p>Background m·ªõi cho profile</p>
        <div class="shop-item-price">
          <span>50</span>
          <span>üêö</span>
        </div>
        <button class="btn btn-primary" style="margin-top:10px" onclick="buyItem('ocean-bg', 50)">Mua ngay</button>
      </div>
      <div class="shop-item">
        <div class="shop-item-img">üê†</div>
        <h3>Chatbot c√° heo</h3>
        <p>Skin m·ªõi cho chatbot</p>
        <div class="shop-item-price">
          <span>75</span>
          <span>üêö</span>
        </div>
        <button class="btn btn-primary" style="margin-top:10px" onclick="buyItem('dolphin-skin', 75)">Mua ngay</button>
      </div>
      <div class="shop-item">
        <div class="shop-item-img">‚ú®</div>
        <h3>Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát</h3>
        <p>Hi·ªáu ·ª©ng khi ho√†n th√†nh b√†i</p>
        <div class="shop-item-price">
          <span>100</span>
          <span>üêö</span>
        </div>
        <button class="btn btn-primary" style="margin-top:10px" onclick="buyItem('special-effect', 100)">Mua ngay</button>
      </div>
      <div class="shop-item">
        <div class="shop-item-img">üéµ</div>
        <h3>Nh·∫°c n·ªÅn ƒë·∫°i d∆∞∆°ng</h3>
        <p>√Çm thanh khi h·ªçc t·∫≠p</p>
        <div class="shop-item-price">
          <span>120</span>
          <span>üêö</span>
        </div>
        <button class="btn btn-primary" style="margin-top:10px" onclick="buyItem('ocean-sound', 120)">Mua ngay</button>
      </div>
    </div>
  </div>
  <!-- NOTES MODAL -->
  <div class="modal-backdrop" id="notesModal" role="dialog" aria-modal="true" aria-hidden="true">
    <div class="modal" role="document" aria-label="Notes editor">
      <div class="note-editor">
        <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:12px">
          <div style="font-weight:900">Ghi ch√∫</div>
          <button onclick="closeNotes()" style="border:none;background:none;cursor:pointer">‚úï</button>
        </div>
        <input id="noteTitle" placeholder="Title: (v√≠ d·ª•: tide - nghƒ©a & v√≠ d·ª•)"/>
        <input id="noteTag" placeholder="Tag / Topic (v√≠ d·ª•: Vocabulary, Marine Life)"/>
        <textarea id="noteBody" rows="9" placeholder="Ghi ch√∫ ·ªü ƒë√¢y... (h·ªá th·ªëng l∆∞u tr√™n tr√¨nh duy·ªát)"></textarea>
        <div class="actions">
          <div style="display:flex;justify-content:space-between;align-items:center;color:var(--muted);font-size:13px">
            <div id="noteMeta">Kh√¥ng c√≥ note ƒë∆∞·ª£c ch·ªçn</div>
            <div style="display:flex;gap:8px">
              <button class="btn btn-outline" onclick="deleteNote()">X√≥a</button>
              <button class="btn btn-primary" onclick="saveNote()">L∆∞u</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- ADD WORD MODAL -->
  <div class="modal-backdrop" id="addWordModal" role="dialog" aria-modal="true" aria-hidden="true">
    <div class="modal" style="max-width:500px">
      <div style="width:100%">
        <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:16px">
          <div style="font-weight:900">Th√™m t·ª´ m·ªõi</div>
          <button onclick="closeAddWordModal()" style="border:none;background:none;cursor:pointer">‚úï</button>
        </div>
        <div class="add-form">
          <div class="form-group">
            <label for="newWord">T·ª´ v·ª±ng</label>
            <input type="text" id="newWord" placeholder="V√≠ d·ª•: tide">
          </div>
          <div class="form-group">
            <label for="newMeaning">Nghƒ©a</label>
            <input type="text" id="newMeaning" placeholder="V√≠ d·ª•: the regular rise and fall of the sea">
          </div>
          <div class="form-group">
            <label for="newExample">V√≠ d·ª• (t√πy ch·ªçn)</label>
            <textarea id="newExample" placeholder="V√≠ d·ª•: The tide brings many shells to the shore." rows="2"></textarea>
          </div>
          <div class="form-group">
            <label for="newTag">Ch·ªß ƒë·ªÅ / Tag (t√πy ch·ªçn)</label>
            <input type="text" id="newTag" placeholder="V√≠ d·ª•: Marine Life, Vocabulary">
          </div>
          <div class="form-group">
            <label for="bulkWords">Th√™m nhi·ªÅu t·ª´ (d√°n danh s√°ch: t·ª´,nghƒ©a,v√≠ d·ª•,tag; m·ªói t·ª´ 1 d√≤ng)</label>
            <textarea id="bulkWords" rows="4" placeholder="tide,the regular rise and fall of the sea,The tide brings many shells to the shore.,Marine Life\ncoral,a hard, colorful substance formed by marine animals,Coral reefs are home to many fish.,Marine Life"></textarea>
          </div>
          <div class="actions">
            <button class="btn btn-outline" onclick="closeAddWordModal()">H·ªßy</button>
            <button class="btn btn-primary" onclick="addNewWords()">Th√™m t·ª´</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- ADD GRAMMAR MODAL -->
  <div class="modal-backdrop" id="addGrammarModal" role="dialog" aria-modal="true" aria-hidden="true">
    <div class="modal" style="max-width:500px">
      <div style="width:100%">
        <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:16px">
          <div style="font-weight:900">Th√™m ng·ªØ ph√°p m·ªõi</div>
          <button onclick="closeAddGrammarModal()" style="border:none;background:none;cursor:pointer">‚úï</button>
        </div>
        <div class="add-form">
          <div class="form-group">
            <label for="newGrammarTitle">Ti√™u ƒë·ªÅ</label>
            <input type="text" id="newGrammarTitle" placeholder="V√≠ d·ª•: Present Simple">
          </div>
          <div class="form-group">
            <label for="newGrammarExplanation">Gi·∫£i th√≠ch</label>
            <textarea id="newGrammarExplanation" placeholder="V√≠ d·ª•: D√πng ƒë·ªÉ di·ªÖn t·∫£ th√≥i quen ho·∫∑c s·ª± th·∫≠t." rows="3"></textarea>
          </div>
          <div class="form-group">
            <label for="newGrammarExample">V√≠ d·ª•</label>
            <textarea id="newGrammarExample" placeholder="V√≠ d·ª•: The tide rises twice a day." rows="2"></textarea>
          </div>
          <div class="form-group">
            <label for="newGrammarTag">Ch·ªß ƒë·ªÅ / Tag (t√πy ch·ªçn)</label>
            <input type="text" id="newGrammarTag" placeholder="V√≠ d·ª•: Tenses, Ocean Terms">
          </div>
          <div class="form-group">
            <label for="bulkGrammar">Th√™m nhi·ªÅu ng·ªØ ph√°p (d√°n danh s√°ch: ti√™u ƒë·ªÅ,gi·∫£i th√≠ch,v√≠ d·ª•,tag; m·ªói m·ª•c 1 d√≤ng)</label>
            <textarea id="bulkGrammar" rows="4" placeholder="Present Simple,D√πng ƒë·ªÉ di·ªÖn t·∫£ th√≥i quen ho·∫∑c s·ª± th·∫≠t,The tide rises twice a day.,Tenses\nPast Simple,D√πng ƒë·ªÉ k·ªÉ v·ªÅ c√°c s·ª± ki·ªán ƒë√£ x·∫£y ra,The ship sailed yesterday.,Tenses"></textarea>
          </div>
          <div class="actions">
            <button class="btn btn-outline" onclick="closeAddGrammarModal()">H·ªßy</button>
            <button class="btn btn-primary" onclick="addNewGrammar()">Th√™m ng·ªØ ph√°p</button>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script>
    // === Core Data ===
    let shells = 120;
    let streak = 4;
    let dailyGoal = 20;
    let todayWords = 12;
    let totalWords = 42;
    let currentPage = 'home';
    let currentNoteId = null;
    let currentCardIndex = 0;
    const skillsData = [
      { id: 1, label: 'Fish', sub: '10 t·ª´', locked: false },
      { id: 2, label: 'Coral', sub: '8 t·ª´', locked: false },
      { id: 3, label: 'Tide', sub: '6 t·ª´', locked: true },
      { id: 4, label: 'Waves', sub: '12 t·ª´', locked: true },
      { id: 5, label: 'Marine Life', sub: '15 t·ª´', locked: false }
    ];
    let vocabData = [
      { id: 1, word: 'tide', meaning: 'the regular rise and fall of the sea', example: 'The tide brings many shells to the shore.', tag: 'Marine Life' },
      { id: 2, word: 'coral', meaning: 'a hard, colorful substance formed by marine animals', example: 'Coral reefs are home to many fish.', tag: 'Marine Life' }
    ];
    let grammarData = [
      { id: 1, title: 'Present Simple', explanation: 'D√πng ƒë·ªÉ di·ªÖn t·∫£ th√≥i quen ho·∫∑c s·ª± th·∫≠t v·ªÅ ƒë·∫°i d∆∞∆°ng.', example: 'The tide rises twice a day.', tag: 'Tenses' },
      { id: 2, title: 'Past Simple', explanation: 'D√πng ƒë·ªÉ k·ªÉ v·ªÅ c√°c s·ª± ki·ªán ƒë√£ x·∫£y ra ·ªü bi·ªÉn.', example: 'The ship sailed through the storm yesterday.', tag: 'Tenses' }
    ];
    let flashcards = [
      { id: 1, word: 'tide', meaning: 'the regular rise and fall of the sea', example: 'The tide brings many shells to the shore.', difficulty: 0, nextReview: new Date() },
      { id: 2, word: 'coral', meaning: 'a hard, colorful substance formed by marine animals', example: 'Coral reefs are home to many fish.', difficulty: 0, nextReview: new Date() }
    ];
    let notes = [
      { id: 1, title: 'Tide Vocabulary', tag: 'Vocabulary', body: 'Tide: Th·ªßy tri·ªÅu, s·ª± l√™n xu·ªëng c·ªßa n∆∞·ªõc bi·ªÉn.', created: new Date() }
    ];
    const chatbotMessages = [
      "H√™, b∆°i nhanh l√™n k·∫ªo c√° m·∫≠p c·∫°p ƒë√≠t gi·ªù =)) ! üòú",
      "H·ªçc t·ª´ m·ªõi ƒëi, ƒë·ª´ng ƒë·ªÉ tui b∆°i m·ªôt m√¨nh nha! üê†",
      "Tide l√† th·ªßy tri·ªÅu, m√† tui th√¨ si√™u... li·ªÅu! üòé",
      "H·ªçc xong t·ª´ n√†y tui d·∫´n ƒëi l√™n b·ªù ƒÉn c√° kh√¥ n√®! üåä",
      "·ª¶a, m·ªõi h·ªçc c√≥ t√≠ m√† l·ªÅ m·ªÅ z m√° ? L·∫π coi ! üòè",
      "ƒê·ª´ng ƒë·ªÉ rong r√™u cu·ªën m·∫•t tinh th·∫ßn h·ªçc nha! üåø",
      "Tui l√† Kh√¥ M·ª±c, qu·∫•n qu√Ωt gi√∫p b·∫°n h·ªçc l·∫π n√®! üêô",
      "H·ªçc ƒëi, kh√¥ng l√† t ƒÉn m lu√¥n gi·ªù =)) ! üòÜ",
      "N√†y, h·ªçc t·ª´ m·ªõi ƒëi, ƒë·ª´ng ƒë·ªÉ t phun n∆∞·ªõc mi·∫øng nghen ! üí¶",
      "Kh√¥ M·ª±c tui ƒë√¢y, h·ªçc l·∫π ƒë·ªÉ c√≤n l·∫∑n bi·ªÉn ch∆°i n√®! ü™∏"
    ];
    // === Utility Functions ===
    function showToast(message, type = 'success') {
      const toast = document.getElementById('toast');
      const toastMessage = document.getElementById('toast-message');
      toastMessage.textContent = message;
      toast.style.background = type === 'success' ? 'var(--success)' : 'var(--danger)';
      toast.style.display = 'flex';
      setTimeout(() => { toast.style.display = 'none'; }, 3000);
    }
    function showChatbotPopup() {
      const popup = document.getElementById('chatPopup');
      popup.textContent = chatbotMessages[Math.floor(Math.random() * chatbotMessages.length)];
      popup.classList.add('active');
      setTimeout(() => { popup.classList.remove('active'); }, 4000);
    }
    function showChatbotMessage() {
      const messages = document.getElementById('messages');
      const randomMsg = chatbotMessages[Math.floor(Math.random() * chatbotMessages.length)];
      messages.innerHTML += `<div class="msg bot">${randomMsg}</div>`;
      messages.scrollTop = messages.scrollHeight;
      setTimeout(() => {
        const oldMessages = messages.querySelectorAll('.msg.bot');
        if (oldMessages.length > 3) {
          oldMessages[0].remove();
        }
      }, 5000);
    }
    function saveToLocalStorage() {
      localStorage.setItem('marineData', JSON.stringify({
        shells, streak, dailyGoal, todayWords, totalWords, vocabData, grammarData, notes, flashcards
      }));
    }
    function loadFromLocalStorage() {
      const data = JSON.parse(localStorage.getItem('marineData'));
      if (data) {
        shells = data.shells || 120;
        streak = data.streak || 4;
        dailyGoal = data.dailyGoal || 20;
        todayWords = data.todayWords || 12;
        totalWords = data.totalWords || 42;
        vocabData = data.vocabData || vocabData;
        grammarData = data.grammarData || grammarData;
        notes = data.notes || notes;
        flashcards = data.flashcards || flashcards;
      }
      updateUI();
    }
    // === Navigation ===
    function goTo(page) {
      document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
      document.getElementById(`${page}-page`).classList.add('active');
      currentPage = page;
      if (page === 'vocab') {
        renderVocabList();
        renderNotes();
      }
      if (page === 'grammar') {
        renderGrammarList();
        renderNotes();
      }
      if (page === 'practice') loadNextFlashcard();
      showChatbotMessage();
    }
    // === Skills ===
    function renderSkills() {
      const skillsContainer = document.getElementById('skills');
      skillsContainer.innerHTML = skillsData.map(skill => `
        <div class="skill ${skill.locked ? 'locked' : ''}" onclick="${skill.locked ? '' : `startSkill(${skill.id})`}">
          <div class="label">${skill.label}</div>
          <div class="sub">${skill.sub}</div>
        </div>
      `).join('');
    }
    function shuffleSkills() {
      skillsData.sort(() => Math.random() - 0.5);
      renderSkills();
      showToast('ƒê√£ s·∫Øp x·∫øp ng·∫´u nhi√™n c√°c k·ªπ nƒÉng!');
      showChatbotMessage();
    }
    function startSkill(id) {
      showToast(`B·∫Øt ƒë·∫ßu h·ªçc k·ªπ nƒÉng: ${skillsData.find(s => s.id === id).label}`);
      goTo('practice');
    }
    function startDaily() {
      showToast('B·∫Øt ƒë·∫ßu b√†i t·∫≠p h√†ng ng√†y!');
      goTo('practice');
    }
    // === Vocabulary ===
    function renderVocabList() {
      const vocabList = document.getElementById('vocab-list');
      vocabList.innerHTML = vocabData.map(item => `
        <div class="vocab-item">
          <div class="vocab-info">
            <div class="vocab-word">${item.word}</div>
            <div class="vocab-meaning">${item.meaning}</div>
            ${item.example ? `<div class="vocab-example">${item.example}</div>` : ''}
            ${item.tag ? `<div style="font-size:12px;color:var(--muted);margin-top:4px">${item.tag}</div>` : ''}
          </div>
          <div class="vocab-actions">
            <button class="vocab-note-btn" onclick="addQuickNote('Vocabulary','${item.word}: ${item.meaning}')">+ Note</button>
            <button class="btn btn-outline" onclick="deleteVocab(${item.id})">X√≥a</button>
          </div>
        </div>
      `).join('');
    }
    function openAddWordModal() {
      document.getElementById('addWordModal').style.display = 'flex';
    }
    function closeAddWordModal() {
      document.getElementById('addWordModal').style.display = 'none';
      document.getElementById('newWord').value = '';
      document.getElementById('newMeaning').value = '';
      document.getElementById('newExample').value = '';
      document.getElementById('newTag').value = '';
      document.getElementById('bulkWords').value = '';
    }
    function addNewWords() {
      const word = document.getElementById('newWord').value.trim();
      const meaning = document.getElementById('newMeaning').value.trim();
      const example = document.getElementById('newExample').value.trim();
      const tag = document.getElementById('newTag').value.trim();
      const bulkWords = document.getElementById('bulkWords').value.trim();
      let newWords = [];
      if (word && meaning) {
        newWords.push({ word, meaning, example, tag });
      }
      if (bulkWords) {
        const lines = bulkWords.split('\n');
        for (let line of lines) {
          const [word, meaning, example = '', tag = ''] = line.split(',').map(s => s.trim());
          if (word && meaning) {
            newWords.push({ word, meaning, example, tag });
          }
        }
      }
      if (newWords.length === 0) {
        showToast('Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt t·ª´ v√† nghƒ©a!', 'danger');
        return;
      }
      const maxId = vocabData.length ? Math.max(...vocabData.map(v => v.id)) : 0;
      newWords.forEach((item, index) => {
        const newId = maxId + index + 1;
        vocabData.push({ id: newId, ...item });
        flashcards.push({ id: newId, ...item, difficulty: 0, nextReview: new Date() });
      });
      totalWords += newWords.length;
      renderVocabList();
      updateUI();
      saveToLocalStorage();
      closeAddWordModal();
      showToast(`ƒê√£ th√™m ${newWords.length} t·ª´ m·ªõi!`);
      showChatbotMessage();
    }
    function deleteVocab(id) {
      vocabData = vocabData.filter(v => v.id !== id);
      flashcards = flashcards.filter(f => f.id !== id);
      totalWords--;
      renderVocabList();
      updateUI();
      saveToLocalStorage();
      showToast('ƒê√£ x√≥a t·ª´!');
      showChatbotMessage();
    }
    // === Grammar ===
    function renderGrammarList() {
      const grammarList = document.getElementById('grammar-list');
      grammarList.innerHTML = grammarData.map(item => `
        <div class="grammar-item">
          <div class="grammar-info">
            <div class="grammar-title">${item.title}</div>
            <div class="grammar-explanation">${item.explanation}</div>
            ${item.example ? `<div class="grammar-example" style="font-style:italic;margin-top:8px">${item.example}</div>` : ''}
            ${item.tag ? `<div style="font-size:12px;color:var(--muted);margin-top:4px">${item.tag}</div>` : ''}
          </div>
          <div class="grammar-actions">
            <button class="grammar-note-btn" onclick="addQuickNote('Grammar','${item.title}: ${item.explanation}')">+ Note</button>
            <button class="btn btn-outline" onclick="deleteGrammar(${item.id})">X√≥a</button>
          </div>
        </div>
      `).join('');
    }
    function openAddGrammarModal() {
      document.getElementById('addGrammarModal').style.display = 'flex';
    }
    function closeAddGrammarModal() {
      document.getElementById('addGrammarModal').style.display = 'none';
      document.getElementById('newGrammarTitle').value = '';
      document.getElementById('newGrammarExplanation').value = '';
      document.getElementById('newGrammarExample').value = '';
      document.getElementById('newGrammarTag').value = '';
      document.getElementById('bulkGrammar').value = '';
    }
    function addNewGrammar() {
      const title = document.getElementById('newGrammarTitle').value.trim();
      const explanation = document.getElementById('newGrammarExplanation').value.trim();
      const example = document.getElementById('newGrammarExample').value.trim();
      const tag = document.getElementById('newGrammarTag').value.trim();
      const bulkGrammar = document.getElementById('bulkGrammar').value.trim();
      let newGrammar = [];
      if (title && explanation) {
        newGrammar.push({ title, explanation, example, tag });
      }
      if (bulkGrammar) {
        const lines = bulkGrammar.split('\n');
        for (let line of lines) {
          const [title, explanation, example = '', tag = ''] = line.split(',').map(s => s.trim());
          if (title && explanation) {
            newGrammar.push({ title, explanation, example, tag });
          }
        }
      }
      if (newGrammar.length === 0) {
        showToast('Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt ti√™u ƒë·ªÅ v√† gi·∫£i th√≠ch!', 'danger');
        return;
      }
      const maxId = grammarData.length ? Math.max(...grammarData.map(g => g.id)) : 0;
      newGrammar.forEach((item, index) => {
        const newId = maxId + index + 1;
        grammarData.push({ id: newId, ...item });
      });
      renderGrammarList();
      updateUI();
      saveToLocalStorage();
      closeAddGrammarModal();
      showToast(`ƒê√£ th√™m ${newGrammar.length} m·ª•c ng·ªØ ph√°p m·ªõi!`);
      showChatbotMessage();
    }
    function deleteGrammar(id) {
      grammarData = grammarData.filter(g => g.id !== id);
      renderGrammarList();
      updateUI();
      saveToLocalStorage();
      showToast('ƒê√£ x√≥a m·ª•c ng·ªØ ph√°p!');
      showChatbotMessage();
    }
    // === Flashcards ===
    function loadNextFlashcard() {
      if (flashcards.length === 0) return;
      currentCardIndex = Math.max(0, Math.min(currentCardIndex, flashcards.length - 1));
      const card = flashcards[currentCardIndex];
      document.getElementById('flashcard-word').textContent = card.word;
      document.getElementById('flashcard-meaning').textContent = card.meaning;
      document.getElementById('flashcard-example').textContent = card.example || '';
      document.getElementById('review-stats').innerHTML = `C√≤n <strong>${flashcards.filter(f => f.nextReview <= new Date()).length}</strong> t·ª´ c·∫ßn √¥n h√¥m nay`;
      showChatbotMessage();
    }
    function prevCard() {
      if (currentCardIndex > 0) {
        currentCardIndex--;
        document.getElementById('flashcard').classList.remove('flipped');
        loadNextFlashcard();
        showToast('ƒê√£ chuy·ªÉn sang t·ª´ tr∆∞·ªõc!');
      } else {
        showToast('ƒê√¢y l√† t·ª´ ƒë·∫ßu ti√™n!', 'danger');
      }
      showChatbotMessage();
    }
    function nextCard() {
      if (currentCardIndex < flashcards.length - 1) {
        currentCardIndex++;
        document.getElementById('flashcard').classList.remove('flipped');
        loadNextFlashcard();
        showToast('ƒê√£ chuy·ªÉn sang t·ª´ ti·∫øp theo!');
      } else {
        showToast('ƒê√£ h·∫øt t·ª´ ƒë·ªÉ √¥n üòé!', 'danger');
      }
      showChatbotMessage();
    }
    function markAsLearned() {
      const currentCard = flashcards[currentCardIndex];
      if (!currentCard) return;
      currentCard.difficulty = 2;
      const now = new Date();
      currentCard.nextReview = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
      todayWords++;
      shells += 5;
      document.getElementById('flashcard').classList.add('flipped');
      setTimeout(() => {
        document.getElementById('flashcard').classList.remove('flipped');
        if (currentCardIndex < flashcards.length - 1) {
          currentCardIndex++;
        } else {
          currentCardIndex = 0;
        }
        loadNextFlashcard();
        updateUI();
        saveToLocalStorage();
        showToast('ƒê√£ ƒë√°nh d·∫•u t·ª´ n√†y l√† ƒë√£ h·ªçc!');
        showChatbotMessage();
      }, 600);
    }
    // === Notes ===
    function openNotes() {
      document.getElementById('notesModal').style.display = 'flex';
    }
    function closeNotes() {
      document.getElementById('notesModal').style.display = 'none';
      currentNoteId = null;
      document.getElementById('noteTitle').value = '';
      document.getElementById('noteTag').value = '';
      document.getElementById('noteBody').value = '';
      document.getElementById('noteMeta').textContent = 'Kh√¥ng c√≥ note ƒë∆∞·ª£c ch·ªçn';
      if (currentPage === 'vocab' || currentPage === 'grammar') renderNotes();
    }
    function renderNotes() {
      const notesContainer = document.getElementById('notesContainer');
      notesContainer.innerHTML = notes.map(note => `
        <div class="note-item" onclick="selectNote(${note.id})">
          <div style="font-weight:800">${note.title}</div>
          <div class="meta">
            <span>${note.tag || 'No tag'}</span>
            <span>${new Date(note.created).toLocaleDateString()}</span>
          </div>
        </div>
      `).join('');
    }
    function selectNote(id) {
      const note = notes.find(n => n.id === id);
      if (!note) return;
      currentNoteId = id;
      document.getElementById('noteTitle').value = note.title;
      document.getElementById('noteTag').value = note.tag || '';
      document.getElementById('noteBody').value = note.body;
      document.getElementById('noteMeta').textContent = `T·∫°o: ${new Date(note.created).toLocaleDateString()}`;
      openNotes();
    }
    function createNewNote() {
      const newId = notes.length ? Math.max(...notes.map(n => n.id)) + 1 : 1;
      notes.push({ id: newId, title: 'New Note', tag: currentPage.charAt(0).toUpperCase() + currentPage.slice(1), body: '', created: new Date() });
      renderNotes();
      selectNote(newId);
      saveToLocalStorage();
      showToast('ƒê√£ th√™m ghi ch√∫ m·ªõi üòé!');
      showChatbotMessage();
    }
    function saveNote() {
      if (!currentNoteId) return;
      const note = notes.find(n => n.id === currentNoteId);
      note.title = document.getElementById('noteTitle').value;
      note.tag = document.getElementById('noteTag').value;
      note.body = document.getElementById('noteBody').value;
      note.created = new Date();
      renderNotes();
      saveToLocalStorage();
      showToast('ƒê√£ l∆∞u ghi ch√∫!');
      if (currentPage === 'vocab' || currentPage === 'grammar') closeNotes();
      showChatbotMessage();
    }
    function deleteNote() {
      if (!currentNoteId) return;
      notes = notes.filter(n => n.id !== currentNoteId);
      currentNoteId = null;
      document.getElementById('noteTitle').value = '';
      document.getElementById('noteTag').value = '';
      document.getElementById('noteBody').value = '';
      document.getElementById('noteMeta').textContent = 'Kh√¥ng c√≥ note ƒë∆∞·ª£c ch·ªçn';
      renderNotes();
      saveToLocalStorage();
      showToast('ƒê√£ x√≥a ghi ch√∫!');
      if (currentPage === 'vocab' || currentPage === 'grammar') closeNotes();
      showChatbotMessage();
    }
    function addQuickNote(title, body) {
      const newId = notes.length ? Math.max(...notes.map(n => n.id)) + 1 : 1;
      notes.push({ id: newId, title, tag: currentPage.charAt(0).toUpperCase() + currentPage.slice(1), body, created: new Date });
      renderNotes();
      selectNote(newId);
      saveToLocalStorage();
      showToast('ƒê√£ th√™m ghi ch√∫ nhanh üêô !');
      showChatbotMessage();
    }
    // === Shop ===
    function buyItem(item, cost) {
      if (shells >= cost) {
        shells -= cost;
        updateUI();
        saveToLocalStorage();
        showToast(`ƒê√£ mua ${item}!`);
      } else {
        showToast('Kh√¥ng ƒë·ªß v·ªè s√≤ ƒë·ªÉ mua!', 'danger');
      }
      showChatbotMessage();
    }
    // === Progress ===
    function updateDailyGoal() {
      const newGoal = parseInt(document.getElementById('daily-goal').value);
      if (newGoal >= 5 && newGoal <= 50) {
        dailyGoal = newGoal;
        updateUI();
        saveToLocalStorage();
        showToast(`M·ª•c ti√™u h√†ng ng√†y c·∫≠p nh·∫≠t: ${newGoal} t·ª´!`);
      } else {
        showToast('M·ª•c ti√™u ph·∫£i t·ª´ 5 ƒë·∫øn 50 t·ª´!', 'danger');
      }
      showChatbotMessage();
    }
    function updateUI() {
      document.getElementById('shells-count').textContent = shells;
      document.getElementById('streak').textContent = streak;
      document.getElementById('streakTxt').textContent = `${streak} ng√†y`;
      document.getElementById('points').textContent = shells;
      document.getElementById('todayWords').textContent = `${todayWords} / ${dailyGoal} t·ª´`;
      document.getElementById('today-goal').textContent = `${todayWords}/${dailyGoal} t·ª´`;
      document.getElementById('streak-days').textContent = `${streak} ng√†y`;
      document.getElementById('total-words').textContent = `${totalWords} t·ª´`;
      document.getElementById('total-shells').textContent = `${shells} üêö`;
      document.getElementById('daily-goal').value = dailyGoal;
      document.getElementById('barFill').style.width = `${(todayWords / dailyGoal) * 100}%`;
      document.querySelector('.progress-card .bar i').style.width = `${(todayWords / dailyGoal) * 100}%`;
    }
    // === Chatbot ===
    document.getElementById('avatar').addEventListener('click', () => {
      const chatbox = document.getElementById('chatbox');
      chatbox.classList.toggle('active');
      if (chatbox.classList.contains('active')) {
        showChatbotMessage();
      }
    });
    document.getElementById('sendBtn').addEventListener('click', () => {
      const input = document.getElementById('chatInput');
      const message = input.value.trim();
      if (!message) return;
      const messages = document.getElementById('messages');
      messages.innerHTML += `<div class="msg user">${message}</div>`;
      let response = '';
      if (message.toLowerCase().startsWith('meaning of')) {
        const word = message.toLowerCase().replace('meaning of', '').trim();
        const vocab = vocabData.find(v => v.word.toLowerCase() === word);
        response = vocab ? `${vocab.word}: ${vocab.meaning}${vocab.example ? ` (e.g., ${vocab.example})` : ''}` : `Tui ch∆∞a bi·∫øt t·ª´ "${word}" nha! üòÖ Th√™m v√†o t·ª´ v·ª±ng ƒëi!`;
      } else if (message.toLowerCase().startsWith('s·ª≠a:') || message.toLowerCase().startsWith('fix:')) {
        const sentence = message.replace(/s·ª≠a:|fix:/i, '').trim();
        response = `Tui kh√¥ng ph·∫£i AI x·ªãn nh∆∞ b√† Gpt ƒë√¢u, nh∆∞ng c√¢u "${sentence}" nghe h∆°i l·∫°. Th·ª≠ th√™m v√†o ph·∫ßn ng·ªØ ph√°p ƒë·ªÉ tui gi√∫p s·ª≠a nh√©! üòÑ`;
      } else {
        response = chatbotMessages[Math.floor(Math.random() * chatbotMessages.length)];
      }
      setTimeout(() => {
        messages.innerHTML += `<div class="msg bot">${response}</div>`;
        messages.scrollTop = messages.scrollHeight;
        setTimeout(() => {
          const oldMessages = messages.querySelectorAll('.msg.bot');
          if (oldMessages.length > 3) {
            oldMessages[0].remove();
          }
        }, 5000);
      }, 500);
      input.value = '';
      messages.scrollTop = messages.scrollHeight;
    });
    document.getElementById('chatInput').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        document.getElementById('sendBtn').click();
      }
    });
    // === Flashcard Interaction ===
    document.getElementById('flashcard').addEventListener('click', () => {
      document.getElementById('flashcard').classList.toggle('flipped');
    });
    // === Generate Bubbles ===
    const bubblesContainer = document.querySelector('.bubbles');
    for (let i = 0; i < 20; i++) {
      const bubble = document.createElement('div');
      bubble.classList.add('bubble');
      let size = Math.random() * 30 + 10;
      bubble.style.width = size + 'px';
      bubble.style.height = size + 'px';
      bubble.style.left = Math.random() * 100 + '%';
      bubble.style.animationDuration = (Math.random() * 5 + 5) + 's';
      bubblesContainer.appendChild(bubble);
    }
    // === Periodic Chatbot Popups ===
    setInterval(() => {
      if (Math.random() > 0.7) { // 30% chance every 20 seconds
        showChatbotPopup();
      }
    }, 20000);
    // === Initialize ===
    function init() {
      loadFromLocalStorage();
      renderSkills();
      renderVocabList();
      renderGrammarList();
      renderNotes();
      loadNextFlashcard();
      updateUI();
      showChatbotMessage();
      showChatbotPopup();
    }
    window.onload = init;
  </script>
</body>
</html>
